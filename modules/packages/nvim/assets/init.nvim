" Basic Configuration
set nocompatible
filetype off

" Auto Installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
	silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Start Plugging
call plug#begin('~/.vim/plugged')
	
	" coc.nvim: LSP Integration
	Plug 'neoclide/coc.nvim', {'branch': 'release'}

	" fugitive.vim: Git Integration
	Plug 'tpope/vim-fugitive'

	" fzf.vim: Fuzzy Finder
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'junegunn/fzf.vim'

	" nvim-tree.lua: File explorer
	Plug 'kyazdani42/nvim-web-devicons'
	Plug 'kyazdani42/nvim-tree.lua'

	" airline.vim: Status Line
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'

	" barbar.nvim: Buffer Line
	Plug 'romgrk/barbar.nvim'
	
	" vim-visual-multi.vim: Multiple Cursors
	Plug 'mg979/vim-visual-multi'

	" surround.vim: Handle parentheses and more surroundings
	Plug 'tpope/vim-surround'

	" editorconfig.vim: Respect projects' editor configuration
	Plug 'editorconfig/editorconfig-vim'

	" peekaboo.vim: Show register contents
	" > Max height issue: junegunn/vim-peekaboo#74
	" Plug 'junegunn/vim-peekaboo'

	" registers.nvim: Show register contents (alternative)
	Plug 'tversteeg/registers.nvim'
	
	" leap.nvim: Easy leap between chars
	Plug 'ggandor/leap.nvim'
	Plug 'ggandor/flit.nvim'

	" nix.vim: Nix Syntax Highlighting
	Plug 'LnL7/vim-nix'

	" dashboard.lua: Show dashboard
	Plug 'glepnir/dashboard-nvim'

	" ctrlxa.vim: Superpowers ctrl-X, ctrl-A
	Plug 'Konfekt/vim-CtrlXA'

	" nvim-notify: Changes notification UI
	Plug 'rcarriga/nvim-notify'

	" nvim-treesitter: Add syntax highlighting
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

	" Colorschemes
	Plug 'sonph/onehalf', { 'rtp': 'vim' }
	Plug 'nyoom-engineering/oxocarbon.nvim'
	Plug 'bluz71/vim-moonfly-colors', { 'as': 'moonfly' }
call plug#end()

" Editor Configuration
set history=1000
set autoread
set autowrite
set mouse=a
set ruler
set hlsearch
set incsearch
set showmatch
set number
set encoding=utf8
set shiftwidth=4
set tabstop=4
set softtabstop=4
set smartindent
set copyindent
set ignorecase
set nobackup
set smartcase
set display+=lastline
set display+=uhex
set scrolloff=3
set laststatus=2
set list
set hidden
set signcolumn=yes

" Colorschemes
" colorscheme onehalfdark
colorscheme moonfly

" Enable GUI Colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
set background=dark

" Relative Line Numbers
set number

augroup numbertoggle
	autocmd!
	autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
	autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

" Key Map
" > Save on Ctrl-S
nnoremap<C-S> :w<cr>

" > Open Tree
nnoremap<C-O> <Cmd>NvimTreeToggle<CR>

" > Prevent Overscroll on PgUp / PgDown
map <silent> <PageUp> <C-U>
map <silent> <PageDown> <C-D>

" > Open Fuzzy Finder on Ctrl-P
nnoremap <C-P> :Files<cr>

" > Leap
map <silent> r <Plug>(leap-forward)
map <silent> R <Plug>(leap-backward)
map <silent> t <Plug>(leap-forward-x)
map <silent> T <Plug>(leap-backward-x)

" > Go to definition
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gh :call CocAction('doHover')<CR>

" > Fix current
nmap <silent> qf <Plug>(coc-fix-current)
nmap <silent> qq <Plug>(coc-codeaction-cursor)

" > Tab Management
" >> Previous / Next Tab
" nmap <leader>] :bnext<CR>
" nmap <leader>[ :bprevious<CR>
nmap <leader>] <Cmd>BufferNext<CR>
nmap <leader>[ <Cmd>BufferPrevious<CR>

" >> Pick
nmap <leader>= <Cmd>BufferPick<CR>

" >> Close Tab
" nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bq <Cmd>BufferClose<CR>

" > Autocomplete
" >> Ctrl-G to Autocomplete
inoremap <silent><expr> <C-G>
	\ coc#pum#visible()
		\ ? coc#pum#stop()
		\ : coc#refresh()

" >> Tab to Autocomplete
inoremap <silent><expr> <TAB>
	\ coc#pum#visible()
		\ ? coc#pum#next(1)
		\ : CheckBackspace()
			\ ? "\<Tab>"
			\ : coc#refresh()

inoremap <silent><expr> <S-TAB>
	\ coc#pum#visible()
		\ ? coc#pum#prev(1)
		\ : "\<C-h>"

function! CheckBackspace() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" > Clipboard Management
" >> Copy to clipboard
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
vnoremap  <leader>y  "+y

" >> Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" >> No writing to register while paste
xnoremap p P

" > Git Grep on :Ggr
command -nargs=+ Ggr execute 'silent Ggrep!' <q-args> | cw | redraw!

" > :Indent
function! s:IndentConfiguration(size, style)
	exec "set tabstop=" . a:size
	exec "set softtabstop=" . a:size
	exec "set shiftwidth=" . a:size
	exec "set " . (a:style == "space" ? "" : "no") . "expandtab"
endfunction

command -nargs=+ Indent call s:IndentConfiguration(<f-args>)

" Airline Configs
" > Tabline (Disabled)
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s:'
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Coc Configs
" > Basic Extensions
let g:coc_global_extensions = [ 'coc-highlight' ]

" > JavaScript / TypeScript Development
call extend(g:coc_global_extensions, [ 'coc-tsserver', 'coc-eslint' ])

" > Web Development
call extend(g:coc_global_extensions, [ 'coc-css', 'coc-html', 'coc-styled-components' ])

" > Structured Data
call extend(g:coc_global_extensions, [ 'coc-json', 'coc-yaml' ])

" > Others
call extend(g:coc_global_extensions, [ 'coc-elixir' ])

" Other Configs
lua << EOF
	vim.api.nvim_set_hl(0, "NormalFloat", { bg = "None" })
	vim.api.nvim_set_hl(0, "FloatBorder", { bg = "None" })

	require'nvim-tree'.setup {
		sort_by = 'case_sensitive',
		disable_netrw = true,
		hijack_netrw = true,
		sync_root_with_cwd = true,

		actions = {
			open_file = {
				resize_window = true
			}
		},

		view = {
			number = true,
			relativenumber = true,
			float = {
				enable = true,
				open_win_config = {
					border = 'rounded',
					relative = 'editor',
					width = 80,
					row = 1,
					col = 2
				}
			}
		},

		update_focused_file = {
			enable = true
		}
	}

	require'leap'.setup {
		-- Do not use "s" for label
		safe_labels = {
			'f', 'n', 'u', 't', '/', 'S',
			'F', 'N', 'L', 'H', 'M', 'U', 'G', 'T', '?', 'Z'
		}
	}

	require'registers'.setup {
		window = {
			border = 'rounded',
			transparency = 0
		}
	}

	require'dashboard'.setup {
		theme = 'hyper',
		config = {
			packages = { enable = false },
			project = { enable = false },
			shortcut = {
				{ desc = 'Finder', icon = ' ', key = 'p', action = 'GFiles' },
				{ desc = 'Tree', icon = ' ', key = 'o', action = 'NvimTreeToggle' }
			},
			footer = {
				'',
				'ネヌ* エディタ r23'
			}
		},
		preview = {
			command = 'cat',
			file_path = vim.fn.stdpath('config') .. '/header.txt',
			file_width = 80,
			file_height = 12
		}
	}

	require'bufferline'.setup()

	require'nvim-treesitter.configs'.setup {
		auto_install = true,
		ensure_installed = {
			'bash',
			'css',
			'diff',
			'elixir',
			'dockerfile',
			'git_rebase',
			'gitignore',
			'glsl',
			'go',
			'graphql',
			'java',
			'javascript',
			'json',
			'lua',
			'markdown',
			'nix',
			'python',
			'rust',
			'scala',
			'styled',
			'svelte',
			'typescript',
			'tsx',
			'vim',
			'vue',
			'xml',
			'yaml'
		},
		highlight = {
			enable = true,
			additional_vim_regex_highlighting = false
		}
	}

	require'notify'.setup {
		max_width = 80,
		render = 'wrapped-compact'
	}

	vim.notify = require'notify'

	-- require'flit'.setup()
EOF

